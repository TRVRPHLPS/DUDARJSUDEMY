const arr = [1, 2, 3, 6, 8];

//Удаление последнего эллемента из массива
//arr.pop()


//Добавление эллемента в конец массива
//arr.push(10);


//Добавление эллемента в начало массива
//arr.unshift(10)


//Удаляет эллемент из начала массива
//arr.shift()

//Цикл перебора массива
//for (let i = 0; i < arr.length; i++) {}



//Классический Цикл перебора массива с выводом каждого эллемента
/*
for (let i = 0; i < arr.length; i++) {
    console.log(arr[i]);
}
*/


//Цикл перебора массива FOR OF с выводом каждого эллмента
//Его преимущество перед методом forEach заключается в возможности
//Использования ключевых слов break и continue
/*
for (let value of arr) {
    console.log(value)
}
*/



/* Метод перебора массива forEach принимает в себя callback функцию,
   которая имеет три параметра,
   первый служит для обращения к каждому эллементу,
   второй обозначает индекс каждого эллемента
   а третий содержит весь массив.
   После определения этих параметров,
   мы можем обращаться к ним внутри функции,
   которая вызывается внутри метода forEach.
/*
arr.forEach(function (item, i, arr) {
    console.log(`${i}: ${item} внутри массива ${arr}`)
});
*/



//const str = prompt("", "");

//Метод split разделяет строку на эллементы и создаёт из них массив
//Аргументом принимает в себя "Разделитель",
//по которому нужно отделять эллементы строки друг от друга.
//const products = str.split(", ")


/*Этот метод наоборот берёт массив и создаёт из его эллементов строку,
принимает аргуметом разделитель, который будет добавлятся между
эллементами массива в строке
*/
//products.join('; ')


//Метод сортировки массива как строки!!
//Может принимать как параметр Callback функцию
//products.sort();


/*Пример использования метода sort, который принимает как параметр
  колбек функцию, которая позволяет отсортировать массив с числами,
  не как строки, а как числа, от наименьшего к большему
  */
/*products.sort(compareNum);

function compareNum(a, b) {
    return a - b;
}
*/